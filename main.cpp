#include "geometry2d.h"
#include <iostream>
#include <string>

#ifdef _WIN32 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Windows. –ï—Å–ª–∏ –ù–ï–¢, —Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –¥–ª—è Windows –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è
#include <windows.h>
#include <cstdlib>
#else
#include <cstdlib>
#endif

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif


}
int main() {
    #ifdef _WIN32
        system("chcp 65001 > nul"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç UTF-8
    #endif

    Geometry2D geom;

    std::string bmpFile = "input.bmp"; //–ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π bmp –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ txt
    std::string txtFile = "output.txt"; // –§–∞–π–ª —Å –±—É–ª–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–µ–¥–∏–Ω–∏—Ü—ã - –∏—Å—Å–ª–µ–¥—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å)
    std::string svgFile = "output.svg"; // –§–∞–π–ª —Å –≤–µ—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π
    std::string txtFinalFile = "output_matrix.txt"; // txt —Ñ–∞–π–ª —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏ 

    std::cout << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Geometry2D Converter!\n";

    while (true) {
        std::cout << "\n=========================================\n";
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n";
        std::cout << "1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ BMP –≤ TXT\n";
        std::cout << "2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å TXT –≤ SVG\n";
        std::cout << "3. –¢–ï–°–¢! –£–º–Ω–æ–∂–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ 2 –∏ –∑–∞–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n";
        std::cout << "0. –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n";
        std::cout << "–ü–†–ò–ú–ï–ß–ê–ù–ò–ï! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é, –≤–≤–æ–¥–∏—Ç–µ 'def'\n";
        std::cout << "=========================================\n";

        std::string inputNumber;
        std::cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ";
        std::cin >> inputNumber;

        if (inputNumber == "1") {
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ BMP —Ñ–∞–π–ª—É: ";
            std::cin >> bmpFile;
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è TXT: ";
            std::cin >> txtFile;
            if (bmpFile == "def") bmpFile = "input.bmp";
            if (txtFile == "def") txtFile = "output.txt";

            if (geom.readBMPAndSaveAsTXT(bmpFile, txtFile)) {
                std::cout << "\n‚úÖ  BMP —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ TXT!\n";
            } else {
                std::cout << "\n‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BMP –≤ TXT.\n";
            }


        } else if (inputNumber == "2") {
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ TXT —Ñ–∞–π–ª—É: ";
            std::cin >> txtFile;
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SVG: ";
            std::cin >> svgFile;
            if (txtFile == "def") txtFile = "output.txt";
            if (svgFile == "def") svgFile = "output.svg";

            if (geom.convertTXTToSVG(txtFile, svgFile)) {
                std::cout << "\n‚úÖ  TXT —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ SVG!\n";
            } else {
                std::cout << "\n‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TXT –≤ SVG.\n";
            }


        } else if (inputNumber == "3") {
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É TXT —Ñ–∞–π–ª—É (—Å –º–∞—Ç—Ä–∏—Ü–µ–π): ";
            std::cin >> txtFile;
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ";
            std::cin >> txtFinalFile;
            if (txtFile == "def") txtFile = "output.txt";
            if (txtFinalFile == "def") txtFinalFile = "output_matrix.txt";

            if (geom.multiplyMatrixByTwo(txtFile, txtFinalFile)) {
                std::cout << "\n‚úÖ  –ú–∞—Ç—Ä–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ 2 –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n";
            } else {
                std::cout << "\n‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—Ä–∏—Ü—ã.\n";
            }


        } else if (inputNumber == "0") {
            std::cout << "\nüëã  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n";
            break;
        } else {
            std::cout << "\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n";
        }

        std::cout << "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...";
        std::cin.ignore(); //—É–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–æ–±—ã—á–Ω–æ \n)
        std::cin.get(); // –ñ–¥—ë—Ç –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è 

        clearScreen();
    }

    return 0;
}

// 1. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –∑–∞–º–µ—Ä–æ–≤ 
// 2. –î–æ–±–∞–≤–∏—Ç—å OpenMP
